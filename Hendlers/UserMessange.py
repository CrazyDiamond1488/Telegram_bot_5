from aiogram import F
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram import Router

from BD.sql import session, Currency, Admin

from sqlalchemy import update
import decimal
#–ò–º–ø–æ—Ä—Ç –∫–Ω–æ–ø–æ–∫
from KeyBoards.KeyBoard import mains, mains_func, mains_admin


router = Router()


# –ö–æ–º–∞–Ω–∞–¥–∞ –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª—é—Ç—ã
@router.message(F.text.lower() == "/get_currencies")
async def get_currencies(message: types.Message):
    currencies = session.query(Currency).all()
    if currencies:
        response = "–°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç —Å –∫—É—Ä—Å–æ–º –∫ —Ä—É–±–ª—é:\n"
        for currency in currencies:
            response = f"{currency.currency_name}: {currency.rate} RUB\n"
            await message.answer(response)
    else:
        response = "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç."
        await message.answer(response)

class ConvertCurrency(StatesGroup):
    amount_con = State()
    curr_con = State()

# –ö–æ–º–∞–Ω–¥–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
@router.message(F.text.lower() == "/convert")
async def convert_currency(message: Message, state: FSMContext):
    await state.set_state(ConvertCurrency.curr_con)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '***':")

@router.message(ConvertCurrency.curr_con)
async def amount_currency(message: Message, state: FSMContext):
    await state.update_data(curr_con=message.text.upper())
    await state.set_state(ConvertCurrency.amount_con)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç—ã:")

@router.message(ConvertCurrency.amount_con)
async def amount_currency_get(message: Message, state: FSMContext):
    await state.update_data(amount_con=message.text)
    data = await state.get_data()
    cur = data["curr_con"]
    await message.answer(f"–í—ã –≤–≤–µ–ª–∏ {data['amount_con']} {cur}, –Ω–∞—á–∏–Ω–∞—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é")

    currency = session.query(Currency).filter(Currency.currency_name == cur).first()
    try:
        if currency:
            amount = decimal.Decimal(data["amount_con"])
            converted_amount = amount * decimal.Decimal(currency.rate)
            await message.answer(f"{amount} {cur} = {converted_amount:.2f} RUB")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏. –¢–∞–∫–æ–π –≤–∞–ª—é—Ç—ã –Ω–µ—Ç.")
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")

    await state.clear()

# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
@router.message(F.text.lower() == "–∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: Message):
    print(message.chat.id)
    user_id = message.from_user.id
    admin = session.query(Admin).filter(Admin.chat_id == str(user_id)).first()
    if admin:
        msg = message.text.lower()
        await message.answer("–ü–µ—Ä–µ—Ö–æ–∂—É –≤ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", reply_markup=mains_admin)
    else:
        await message.answer('–í–∞–º –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤üò°', KeyBoards=mains)

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç–æ–π
@router.message(F.text.lower() == "/manage_currency")
async def manage(message: Message):
    await message.answer('–ü—Ä–∏—Å—Ç—É–ø–∞—é –∫ —Ä–∞–±–æ—Ç–µ —Å –≤–∞–ª—é—Ç–æ–π', reply_markup=mains_func)

class Curstate(StatesGroup):
    cur_name = State()
    cur_rate = State()

@router.message(F.text.lower() == "–¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É")
async def manage(message: Message, state: FSMContext):
    await state.set_state(Curstate.cur_name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã')

@router.message(Curstate.cur_name)
async def process_currency_name(message: Message, state: FSMContext):
    currency_name = message.text.upper()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–∞—è –≤–∞–ª—é—Ç–∞ —É–∂–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    existing_currency = session.query(Currency).filter(Currency.currency_name == currency_name).first()
    if existing_currency:
        await message.answer('–î–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
        await state.clear()
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(currency_name=message.text)
        await state.set_state(Curstate.cur_rate)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å –∫ —Ä—É–±–ª—é')


@router.message(Curstate.cur_rate)
async def process_currency_rate(message: Message, state: FSMContext):
    await state.update_data(cur_rate=message.text)
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–ª—é—Ç–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    currency_name = data['currency_name'].upper()
    exchange_rate = message.text

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ –≤–∞–ª—é—Ç–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    new_currency = Currency(currency_name=currency_name, rate=float(exchange_rate))
    session.add(new_currency)
    session.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∞–ª—é—Ç—ã
    await message.answer(f"–í–∞–ª—é—Ç–∞ {currency_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã
    await state.clear()

class CurstateDel(StatesGroup):
    cur_name_delete = State()

@router.message(F.text.lower() == "—É–¥–∞–ª–∏—Ç—å –≤–∞–ª—é—Ç—É")
async def delete_currency(message: Message, state: FSMContext):
    await state.set_state(CurstateDel.cur_name_delete)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å')

@router.message(CurstateDel.cur_name_delete)
async def confirm_delete_currency(message: Message, state: FSMContext):
    currency_name = message.text.upper()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–∞—è –≤–∞–ª—é—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    existing_currency = session.query(Currency).filter(Currency.currency_name == currency_name).first()
    if existing_currency:
        # –£–¥–∞–ª—è–µ–º –≤–∞–ª—é—Ç—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        session.delete(existing_currency)
        session.commit()
        await message.answer(f'–í–∞–ª—é—Ç–∞ {currency_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.')
    else:
        await message.answer('–î–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã
    await state.clear()


class Curstate_new(StatesGroup):
    cur_nameNew = State()
    cur_rate_new = State()

@router.message(F.text.lower() == "–∏–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã")
async def change_currency_rate(message: Message, state: FSMContext):
    await state.set_state(Curstate_new.cur_nameNew)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å')

@router.message(Curstate_new.cur_nameNew)
async def request_new_rate(message: Message, state: FSMContext):
    currency_name_new = message.text.upper()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–∞—è –≤–∞–ª—é—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    existing_currency = session.query(Currency).filter(Currency.currency_name == currency_name_new).first()
    if existing_currency:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∫—É—Ä—Å
        await state.update_data(cur_nameNew=currency_name_new)
        await state.set_state(Curstate_new.cur_rate_new)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å –∫ —Ä—É–±–ª—é –¥–ª—è –≤–∞–ª—é—Ç—ã')
    else:
        await message.answer('–î–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')


@router.message(Curstate_new.cur_rate_new)
async def update_currency_rate(message: Message, state: FSMContext):
    new_rate = message.text
    await state.update_data(cur_rate_new=new_rate)
    currency_name = (await state.get_data())['cur_nameNew']
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    existing_currency = session.query(Currency).filter(Currency.currency_name == currency_name).first()
    if existing_currency:
        update_query = (
            update(Currency)
            .where(Currency.currency_name == currency_name)  # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏ –≤–∞–ª—é—Ç—ã
            .values(rate=new_rate)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞
        )
        session.execute(update_query)
        session.commit()
        await message.answer(f'–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã {currency_name} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_rate}.')
    else:
        await message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã.')

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã
    await state.clear()


@router.message()
async def admin_panel(message: Message):
    msg = message.text.lower()
    if msg == '/–Ω–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å':
        await message.answer("–í–æ–∑–≤—Ä–∞—Ç –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏",reply_markup=mains_admin)
    else:
        await message.answer('–í–æ–∑–≤—Ä–∞—Ç –≤ –æ–±—â—É—é –ø–∞–Ω–µ–ª—å',reply_markup=mains)